const sql = require('mssql');
const fs = require('fs');

async function testFixedTimeLogic() {
    try {
        const config = {
            user: 'sa',
            password: 'Admin@123',
            server: 'localhost',
            database: 'hanet',
            options: {
                encrypt: false,
                trustServerCertificate: true
            }
        };
        
        await sql.connect(config);
        
        console.log('üîÑ TEST LOGIC TIME ƒê√É S·ª¨A');
        console.log('='.repeat(50));
        
        // X√≥a stored procedure c≈©
        console.log('üóëÔ∏è X√≥a stored procedure c≈©...');
        try {
            await sql.query('DROP PROCEDURE sp_XuLyChamCongMoi_Corrected');
            console.log('‚úÖ ƒê√£ x√≥a stored procedure c≈©');
        } catch (error) {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y stored procedure c≈© ƒë·ªÉ x√≥a');
        }
        
        // T·∫°o stored procedure m·ªõi
        console.log('üìù ƒêang t·∫°o stored procedure m·ªõi v·ªõi logic TIME ƒë√£ s·ª≠a...');
        const sqlContent = fs.readFileSync('SQL Server 2012/sp_XuLyChamCongMoi_Corrected.sql', 'utf8');
        const result = await sql.query(sqlContent);
        console.log('‚úÖ ƒê√£ t·∫°o stored procedure m·ªõi th√†nh c√¥ng!');
        
        // X√≥a d·ªØ li·ªáu c≈© ƒë·ªÉ test
        console.log('\nüóëÔ∏è X√≥a d·ªØ li·ªáu c≈© ƒë·ªÉ test...');
        const deleteResult = await sql.query('DELETE FROM ChamCongDaXuLyMoi');
        console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.rowsAffected[0]} b·∫£n ghi c≈©`);
        
        // Ch·∫°y stored procedure m·ªõi
        console.log('\nüîÑ Ch·∫°y stored procedure m·ªõi...');
        const startTime = new Date();
        const spResult = await sql.query('EXEC sp_XuLyChamCongMoi_Corrected');
        const endTime = new Date();
        const duration = endTime - startTime;
        
        console.log(`‚úÖ Ho√†n th√†nh trong ${duration}ms`);
        
        // Ki·ªÉm tra k·∫øt qu·∫£
        console.log('\nüìä K·∫æT QU·∫¢ SAU KHI CH·∫†Y SP:');
        const resultCheck = await sql.query(`
            SELECT 
                MaNhanVienNoiBo,
                TenNhanVien,
                NgayChamCong,
                CAST(GioVao AS TIME) as GioVaoTime,
                CAST(GioRa AS TIME) as GioRaTime,
                ThoiGianLamViec,
                TrangThai,
                CaLamViec
            FROM ChamCongDaXuLyMoi
            WHERE TenNhanVien LIKE N'%Tr·∫ßn Tr·ªçng Tu√¢n%'
            ORDER BY NgayChamCong DESC
        `);
        
        if (resultCheck.recordset.length > 0) {
            resultCheck.recordset.forEach(record => {
                console.log(`   üìã ${record.TenNhanVien} (${record.MaNhanVienNoiBo})`);
                console.log(`     Checkin: ${record.GioVaoTime} ‚Üí Ca: ${record.CaLamViec}`);
                console.log(`     Checkout: ${record.GioRaTime}`);
                console.log(`     Th·ªùi gian: ${record.ThoiGianLamViec}h`);
                console.log(`     Tr·∫°ng th√°i: ${record.TrangThai}`);
                
                // Ph√¢n t√≠ch logic
                if (record.CaLamViec === 'VHCN') {
                    console.log(`     ‚úÖ ƒê√öNG: Checkin l√∫c ${record.GioVaoTime} ‚Üí Ca ng√†y VHCN`);
                } else if (record.CaLamViec === 'VHCD') {
                    console.log(`     ‚úÖ ƒê√öNG: Checkin l√∫c ${record.GioVaoTime} ‚Üí Ca ƒë√™m VHCD`);
                } else if (record.CaLamViec === 'VH') {
                    console.log(`     ‚ùå SAI: Checkin l√∫c ${record.GioVaoTime} ‚Üí V·∫´n l√† ca VH (ch∆∞a ƒë∆∞·ª£c x√°c ƒë·ªãnh)`);
                }
                console.log('     ---');
            });
        } else {
            console.log('   ‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n Tr·∫ßn Tr·ªçng Tu√¢n');
        }
        
        // Ki·ªÉm tra t·∫•t c·∫£ ca VH
        console.log('\nüåô T·∫§T C·∫¢ CA VH:');
        const allVHResult = await sql.query(`
            SELECT 
                MaNhanVienNoiBo,
                TenNhanVien,
                NgayChamCong,
                CAST(GioVao AS TIME) as GioVaoTime,
                CAST(GioRa AS TIME) as GioRaTime,
                ThoiGianLamViec,
                TrangThai,
                CaLamViec
            FROM ChamCongDaXuLyMoi
            WHERE CaLamViec IN ('VH', 'VHCN', 'VHCD')
            ORDER BY NgayChamCong DESC, GioVaoTime ASC
        `);
        
        if (allVHResult.recordset.length > 0) {
            console.log(`   üìä T√¨m th·∫•y ${allVHResult.recordset.length} ca VH:`);
            allVHResult.recordset.forEach(record => {
                console.log(`   - ${record.TenNhanVien} (${record.MaNhanVienNoiBo})`);
                console.log(`     Checkin: ${record.GioVaoTime} ‚Üí Ca: ${record.CaLamViec}`);
                console.log(`     Checkout: ${record.GioRaTime}`);
                console.log(`     Th·ªùi gian: ${record.ThoiGianLamViec}h`);
                console.log(`     Tr·∫°ng th√°i: ${record.TrangThai}`);
                console.log('     ---');
            });
        } else {
            console.log('   ‚úÖ Kh√¥ng c√≥ ca VH n√†o');
        }
        
        await sql.close();
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

testFixedTimeLogic();
